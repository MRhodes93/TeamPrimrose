package datamethods;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

import org.bson.Document;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import mongomethods.MongoConnection;
import objectclasses.Employee;
import objectclasses.PostalAddress;
import objectclasses.User;

public class DataTester {
	
	static Scanner input = new Scanner(System.in);
	
	public static void main(String[] args) {
		
		//TODO: password encryption
		
		System.out.println("Please select a function: ");
		System.out.println("1: Load users from .csv file");
		System.out.println("2: Set a user as inactive");
		System.out.println("0: Exit");
		int choice = input.nextInt();
		
		switch(choice)
		{
		case 1:
		{
			System.out.println("Loading users from .csv file");
			myMongoObject mmO = new myMongoObject();
			myMongoObject current = MongoSetup(mmO);
			addToMongo(current);
			break;
		}
		case 2:
		{
			System.out.println("Setting a user as inactive");
			setInactive();
			break;
		}
		case 0:
		{
			System.out.println("Thanks for using Primrose software, goodbye!");
			System.exit(0);
		}
		default:
			System.out.println("Invalid input");
			main(args);
			break;
		}
		
		main(args);
		
		
	}
	
	private static void setInactive() {
		System.out.print("To set a user as INACTIVE, please enter the user/employee ID number: ");
		int inactiveID = input.nextInt();
		
		//TODO: Check if the ID exists in the document? or in what's already uploaded in Mongo?
		//if so, set it to inactive
		//if not, prompt user for new ID or allow to return to main menu
		
				
	}

	public static User getUser(String employee) {
		   
	   User user = new User(employee, "TeamPrimrose!1");	  
	   return user;
	}
	
	private static myMongoObject MongoSetup(myMongoObject mmO)
	{
		//TODO: prompt the user for the path and extension of their own csv file as String (tenK)
		
		
		String oneK = "src/testdataN1K.csv";
		String tenK = "src/testdataN10K.csv";
	
		
		ArrayList<HashMap<String, String>> hm2 = ReadMethods.createListFromCSV(tenK, ",");  //readIn list
		
		String[] dataOrder = {"firstName", "middleName", "lastName", "socialSecurityNumber", "dateOfBirth", "postalAddress", "phoneNumber", "hireDate"};		
		
		ArrayList<Employee> employeeList = new ArrayList<>();
		mmO.setEmployeeList(employeeList);
		
		// instantiate a mongodb from MongoConnection class
		MongoDatabase db = MongoConnection.getInstance().getMongoDatabase();
				
		// instantiate a collection 
		MongoCollection<Document> employeeCollection = db.getCollection("employees");
		MongoCollection<Document> userCollection = db.getCollection("users"); 	
		mmO.setEmployeeCollection(employeeCollection);
		mmO.setUserCollection(userCollection);
		
		
		//System.out.println("Rows: " + hm1.size() + " Columns: " + hm1.get(0).size());  //works
		//System.out.println("Rows: " + hm2.size() + " Columns: " + hm2.get(0).size());  //works
		
		return loadEmployees(hm2, dataOrder, mmO);
	}
	
	private static myMongoObject loadEmployees(ArrayList<HashMap<String, String>> hm2, String[] dataOrder, myMongoObject mmO)
	{
		for (HashMap<String, String> row : hm2) {
			Employee emp = new Employee();
			emp.setActive(true);
			//Employee(, row.get(dataOrder[1]), row.get(dataOrder[2]), row.get(dataOrder[3]), row.get(dataOrder[4]), new PostalAddress(row.get(dataOrder[5])), row.get(dataOrder[6]), row.get(dataOrder[7]))
			
			emp.setFirstName(row.get(dataOrder[0]));
			emp.setMiddleName(row.get(dataOrder[1]));
			emp.setLastName(row.get(dataOrder[2]));
			emp.setSocialSecurityNumber(Integer.parseInt(row.get(dataOrder[3])));
			emp.setDob(row.get(dataOrder[4]));
			emp.setPostalAddress(new PostalAddress(row.get(dataOrder[5])));
			emp.setPhoneNumber(row.get(dataOrder[6]));
			
			mmO.getEmployeeList().add(emp);
			//employeeList.add(emp);
			
		}
		//addToMongo(employeeList, employeeCollection, userCollection);
		//addToMongo(mmO);
		return mmO;
	}
	
	private static void addToMongo(myMongoObject mmO)
	{
		// create a tester document
		/*Document doc = new Document("name", "MongoDB")
						.append("type", "database")
						.append("count", 1)
						.append("info", new Document("x", 203).append("y", 102));
						
		collection.insertOne(doc);
		*/
		
		for (int i = 0; i < mmO.getEmployeeList().size();i++) {
			ObjectMapper mapper = new ObjectMapper();
			String employeeString;
			String userString;
			
			try {
				
				User user = getUser(mmO.getEmployeeList().get(i).fullNameAsString());
				employeeString = mapper.writeValueAsString(mmO.getEmployeeList().get(i));
				userString = mapper.writeValueAsString(user);
				
				Document employeeDoc = new Document("id", i).append("employee", employeeString);
				mmO.getEmployeeCollection().insertOne(employeeDoc);
				
				Document userDoc = new Document("id", i).append("employee", userString);
				mmO.getUserCollection().insertOne(userDoc);
				
			} catch (JsonProcessingException e) {
				
				e.printStackTrace();
			}
		}
			
		System.out.println(mmO.getEmployeeCollection().count());
		System.out.println(mmO.getUserCollection().count());
			
		//System.out.println("Employees in employeeList: " + employeeList.size());
		/*  verify employeeList is populated
		for (Employee em : employeeList) {
			System.out.println(em);
		}
		System.out.println("Employees in employeeList: " + employeeList.size());
		*/
	}

}


